### Query a 3 dimensional array
This tree just got a bit raunchier. Now every movie in `movieLists` has an array containing objects of varying box art sizes.  

Retrieve `id`, `title`, and a 150x200 boxart `url` for every video.  Here, we'll use `map()`, `filter()` and `concatAll()`.  

```js
(function() {
  var movieLists = [
      {
        name: "Instant Queue",
        videos : [
          {
            "id": 70111470,
            "title": "Die Hard",
            "boxarts": [
              { width: 150, height:200, url:"http://cdn-0.nflximg.com/images/2891/DieHard150.jpg" },
              { width: 200, height:200, url:"http://cdn-0.nflximg.com/images/2891/DieHard200.jpg" }
            ],
            "url": "http://api.netflix.com/catalog/titles/movies/70111470",
            "rating": 4.0,
            "bookmark": []
          },
          {
            "id": 654356453,
            "title": "Bad Boys",
            "boxarts": [
              { width: 200, height:200, url:"http://cdn-0.nflximg.com/images/2891/BadBoys200.jpg" },
              { width: 150, height:200, url:"http://cdn-0.nflximg.com/images/2891/BadBoys150.jpg" }

            ],
            "url": "http://api.netflix.com/catalog/titles/movies/70111470",
            "rating": 5.0,
            "bookmark": [{ id:432534, time:65876586 }]
          }
        ]
      },
      {
        name: "New Releases",
        videos: [
          {
            "id": 65432445,
            "title": "The Chamber",
            "boxarts": [
              { width: 150, height:200, url:"http://cdn-0.nflximg.com/images/2891/TheChamber150.jpg" },
              { width: 200, height:200, url:"http://cdn-0.nflximg.com/images/2891/TheChamber200.jpg" }
            ],
            "url": "http://api.netflix.com/catalog/titles/movies/70111470",
            "rating": 4.0,
            "bookmark": []
          },
          {
            "id": 675465,
            "title": "Fracture",
            "boxarts": [
              { width: 200, height:200, url:"http://cdn-0.nflximg.com/images/2891/Fracture200.jpg" },
              { width: 150, height:200, url:"http://cdn-0.nflximg.com/images/2891/Fracture150.jpg" },
              { width: 300, height:200, url:"http://cdn-0.nflximg.com/images/2891/Fracture300.jpg" }
            ],
            "url": "http://api.netflix.com/catalog/titles/movies/70111470",
            "rating": 5.0,
            "bookmark": [{ id:432534, time:65876586 }]
          }
        ]
      }
    ];

  return movieLists.map( movieList =>
    movieList.videos.map( video =>
      video.boxarts.filter( boxart =>
        boxart.width === 150 && boxart.height === 200).map( boxart => 
          ({ id:video.id, title:video.title, boxart:boxart.url }) 
  ))) 
    .concatAll()
      .concatAll();

})();
```

>```js
[ { 
      boxart: "http://cdn-0.nflximg.com/images/2891/DieHard150.jpg"
      id: 70111470
      title: "Die Hard" 
    }, 
  { 
      boxart: "http://cdn-0.nflximg.com/images/2891/BadBoys150.jpg"
      id: 654356453
      title: "Bad Boys" 
    },
  { 
      boxart: "http://cdn-0.nflximg.com/images/2891/TheChamber150.jpg"
      id: 65432445
      title: "The Chamber" 
    },
  { 
      boxart: "http://cdn-0.nflximg.com/images/2891/Fracture150.jpg"
      id: 675465
      title: "Fracture" 
    }
]
```
Three layers deep, get what we want, and return a flat array.  

## Break it Down
```js
  return movieLists.map( movieList =>
    movieList.videos.map( video =>
      video.boxarts.filter( boxart =>
        boxart.width === 150 && boxart.height === 200).map( boxart => 
          ({ id:video.id, title:video.title, boxart:boxart.url }) 
  ))) 
    .concatAll()
      .concatAll();
```

* `map()` over `movieList`
  - mapping through each `list`, return the `videos` inner-array and
* `map()` over each `video` item, passing in a call to
* `filter()` the `boxarts` array. 
  - if the `width` is 150 and the `height` is 200
    + `map()` over the `boxarts` array (_now on the third level_)
* Reurn an object 
  - with the `id`, and `title` from the `video` array, and 
  - the `url` from the `boxarts` array
  - At this point, we have a 3 dimensional array. An array of two arrays
    + inside if which are 2 inner-arrays
    + each 1 item long, holding a single video object

>```js
[ [[{...}],[{...}]], [[{...}],[{...}]] ]
```

* `concatAll()` to flatten it out

>```js
[ [{...}],[{...}],[{...}],[{...}] ]
```

* That only flattens it from a 3D array to a 2D array
* `concatAll()` again
* And get exactly what we want

>```js
[ {...},{...},{...},{...} ]
```

As we see, `concatAll()` only flattens one level of nesting. Since `map()` was called 3 times, we must `concatAll()` twice. `concatAll()` can take us from a 2D to 1D, or from 3D to 2D and so on.

