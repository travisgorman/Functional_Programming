### Project and flatten `movieLists` into an array of video ids
`movieLists` is an array containing two collections, "New Releases" and "Dramas", each with their own separate arrays of movies. I need dig two levels deep, retrieve the `id` value of all the movies in both lists, and return them in a flattened array.  

This is done with two nested calls to `map()` and one call to `concatAll()`.

```js
(function() {
  var movieLists = [
      {
        name: "New Releases",
        videos: [
          {
            "id": 70111470,
            "title": "Die Hard",
            "boxart": "http://cdn-0.nflximg.com/images/2891/DieHard.jpg",
            "uri": "http://api.netflix.com/catalog/titles/movies/70111470",
            "rating": 4.0,
            "bookmark": []
          },
          {
            "id": 654356453,
            "title": "Bad Boys",
            "boxart": "http://cdn-0.nflximg.com/images/2891/BadBoys.jpg",
            "uri": "http://api.netflix.com/catalog/titles/movies/70111470",
            "rating": 5.0,
            "bookmark": [{ id:432534, time:65876586 }]
          }
        ]
      },
      {
        name: "Dramas",
        videos: [
          {
            "id": 65432445,
            "title": "The Chamber",
            "boxart": "http://cdn-0.nflximg.com/images/2891/TheChamber.jpg",
            "uri": "http://api.netflix.com/catalog/titles/movies/70111470",
            "rating": 4.0,
            "bookmark": []
          },
          {
            "id": 675465,
            "title": "Fracture",
            "boxart": "http://cdn-0.nflximg.com/images/2891/Fracture.jpg",
            "uri": "http://api.netflix.com/catalog/titles/movies/70111470",
            "rating": 5.0,
            "bookmark": [{ id:432534, time:65876586 }]
          }
        ]
      }
    ];

return movieLists.map( list => 
  list.videos.map( video => video.id ))
  .concatAll();
})();

```
>```js 
[70111470, 654356453, 65432445, 675465]
```

Let's look at that last bit of code and see what's going on here

```js
return movieLists.map( list => 
  list.videos.map( video => video.id ))
  .concatAll();
```
* `map()` over `movieLists` 
  - with an anonymous callback function that takes a `list` item
  - That maps over the individual movie lists
  - First `map()` is called on "New Releases", and then "Dramas"
  - For each movie in each collection, we want only the `id` value 
* Nest another `map()` expression 
  - This `map()` calls an anonymous function that takes a `video` item
  - `map()` over all the videos in each movie list 
  - and returns the `id` of each video. 
* At this point I have a 2 dimensional array
  - For each movie list, we returned a transformed array
  - `map()` always returns an array 
  - What we have looks like this

>```js
[ [70111470, 654356453], [65432445, 675465] ]
```

* Finally, chain `concatAll()` onto this 2D array to flatten it 

>```js
[ 70111470, 654356453, 65432445, 675465 ]
```

#### footNotes
* `concatAll()` only works on 2D arrays. It **doesn't** work on objects containing arrays. 
* use `map()` to transform an object to an array *(with what you want in it)*
* If `movielists` were not divided into the two named genre objects, meaning if it were an array of arrays, we could flatten it with `concatAll()` first and then use `map()` to project the `id` values onto an array, returning the same result. 
